## Batman.Set

`Set` is an observable, `Batman.Object` wrapper around `SimpleSet`.

#### SimpleSet vs Set

`SimpleSet` and `Set` are two distinct classes in Batman. `SimpleSet` implements the basic set semantics, but it is *not* a `Batman.Object`, so properties on it (like it's `length` or `toArray`) can not be bound. `Set` is a `Batman.Object`, so it can be observed, and thus plays nice with the accessor system. Use a `SimpleSet` only when you know nothing will need to be observed on the set you are creating, which usually isn't a valid assumption. If it is in fact correct, consider using a native array as well, because iteration and in fact membership checks will be faster.

### constructor(items...)

When creating a `Set`, items forming the initial set can be passed as separate arguments to the constructor

!!!
test 'new Set constructor can be called without arguments', ->
  show set = new Batman.Set
  deepEqual set.toArray(), []
!!!

!!!
test 'new Set constructor can be passed items to add to the set.', ->
  show set = new Batman.Set('a', 'b', 'c')
  deepEqual set.toArray().sort(), ['a', 'b', 'c']
!!!

### length : number

A count of the items in a `Set` can be found at it's `length` property.

### isEmpty : boolean

Observable property for `isEmpty()`

### toArray : Array

Observable property for `toArray()`. Whenever items are added or removed on the set, the `toArray` property will change. This is the mechanism by which Batman's view bindings get notified of collection updates.

!!!
test 'observers on the toArray property fire when the set changes', ->
  show set = new Batman.Set('a', 'b', 'c')
  show set.observe('toArray', (newArray) -> log newArray.sort())
  deepEqual set.add('d'), ['d']
  deepEqual logged.last, ['a', 'b', 'c', 'd']
  deepEqual set.remove('b'), ['b']
  deepEqual logged.last, ['a', 'c', 'd']
!!!

### has(item) : Boolean

`has` returns a boolean describing if the given `item` is a member of the set.

_Note_: Using `has(item)` in an accessor body will register the set `has` is called upon as a source of the property being calculated. This so that whenever the set changes, the property will be recalculated, because the set may now have or not have the item in question.

!!!
test 'Set::has indicates if an item is a member of the set or not.', ->
  show set = new Batman.Set('a', 'b', 'c')
  ok set.has('a')
  equal set.has('d'), false
!!!

!!!
test 'Set::has registers the set as a source of an accessor', ->
  show (class Team extends Batman.Object
    constructor: ->
      @awards = new Batman.Set()

    @accessor 'bestEver?', -> @get('awards').has('Stanley Cup')
  )
  show team = new Team
  show team.observeAndFire 'bestEver?', (status) -> log status
  show team.get('awards').add 'Eastern Conference Champs'
  equal logged.last, false
  show team.get('awards').add 'Stanley Cup'
  equal logged.last, true
!!!

### add(items...)

`add` adds 0 or more new items to the set. `add` returns an array of the items which have been newly added to the set, which is to say the intersection of the argument items and the set itself before addition.

`add` fires the `itemsWereAdded` event with the list of items newly added to the set if that list has length greater than 0. This is to say the event will not be fired if the items passed to add were all already members of the set.

!!!
test 'Set::add adds an item to the set', ->
  show set = new Batman.Set()
  equal set.has('a'), false
  deepEqual set.add('a'), ['a']
  equal set.has('a'), true
!!!

!!!
test 'Set::add returns only the new items that weren\'t previously in the set', ->
  show set = new Batman.Set('a', 'b')
  deepEqual set.add('b','c','d').sort(), ['c', 'd']
  deepEqual set.toArray().sort(), ['a', 'b', 'c', 'd']
!!!

!!!
test 'Set::add fires the itemsWereAdded event with the items newly added to the set', ->
  show set = new Batman.Set('a', 'b')
  show set.on('itemsWereAdded', (items...) -> log items)
  show set.add('b','c','d')
  deepEqual logged.last.sort(), ['c','d']
!!!

!!!
test 'Set::add does not fire the itemsWereAdded event if the added items were already in the set.', ->
  show set = new Batman.Set('a', 'b')
  show set.on('itemsWereAdded', (items...) -> log items)
  show set.add('a', 'b')
  equal typeof logged.last, 'undefined'
!!!

### remove(items...)

`remove` removes 0 or more items from the set. `remove` returns an array of the items which were successfully removed from the set, which is to say the intersection of the argument items and the set itself before removal.

`remove` fires the `itemsWereRemoved` event with the list of removed items if that list has length greater than 0. This is to say the event will not be fired if none of the passed items were members of the set.

!!!
test 'Set::remove removes an item from the set', ->
  show set = new Batman.Set('a')
  equal set.has('a'), true
  deepEqual set.remove('a'), ['a']
  equal set.has('a'), false
!!!

!!!
test 'Set::remove returns only the new items that were previously in the set', ->
  show set = new Batman.Set('a', 'b')
  deepEqual set.remove('b','c','d').sort(), ['b']
  deepEqual set.toArray(), ['a']
!!!

!!!
test 'Set::remove fires the itemsWereRemoved event with the items removed to the set', ->
  show set = new Batman.Set('a', 'b', 'c')
  show set.on('itemsWereRemoved', (items...) -> log items)
  show set.remove('b','c')
  deepEqual logged.last.sort(), ['b','c']
!!!

!!!
test 'Set::remove does not fire the itemsWereRemoved event if the removed items were not already members of the set.', ->
  show set = new Batman.Set('a', 'b')
  show set.on('itemsWereRemoved', (items...) -> log items)
  show set.remove('c', 'd')
  equal typeof logged.last, 'undefined'
!!!

### find(testFunction : function) : [Object]

`find` returns the first item within the set for which the `testFunction` called with the item returns `true`, or `undefined` if no item passes the test.

_Note_: `find` returns the first item the test passes for, but since set iteration has no specified order, no guarantee can be made about which item will be returned if more than one item in the set passes the test. However, set iteration order is stable, so `find` called on the same set twice should return the same item.


!!!
test 'Set::find returns the first item for which the test function passes', ->
  show set = new Batman.Set(1, 2, 3)
  equal set.find((x) -> x % 2 == 0), 2
!!!

!!!
test 'Set::find returns undefined if no items pass the test function', ->
  show set = new Batman.Set(1, 2, 3)
  equal typeof set.find((x) -> x > 5), 'undefined'
!!!

### forEach(iteratorFunction : function[, context: Object])

`forEach` calls the `iteratorFunction` with each item in the set, optionally executing the `iteratorFunction` in the passed context. Returns `undefined`.

_Note_: Set iteration order is not defined, which is to say Set client code cannot rely on one item being iterated over before another, regardless of when the Set's items were added. If you need an ordered set, Batman provides `SetSort` for exactly this, while including the added benefit of observability. If you need a one time ordering of a set, you can get the array representation with `toArray` and then use vanilla JavaScript `sort` on that array.

_Note_: Using `forEach()` in an accessor body will register the set iterated over as a source of the property being calculated. This so that whenever the set changes, the property will be recalculated. This can be come an issue if you iterate over a set and modify the set's items, as when the property recalculates that modification will potentially happen on item's it's happened on previously.

!!!
test 'Set::forEach iterates over each item in the set', ->
  show sum = 0
  show set = new Batman.Set(1,2,3)
  show set.forEach (x) -> sum += x
  equal sum, 6
!!!

!!!
test 'Set::forEach iterates over each item in the set optionally in the provided context', ->
  show context = {sum: 0}
  show set = new Batman.Set(1,2,3)
  show(set.forEach((x) ->
    @sum += x
  , context))
  equal context.sum, 6
!!!

!!!
test 'Set::forEach registers the set as a source if called in an accessor body', ->
  show (class Team extends Batman.Object
    constructor: ->
      @players = new Batman.Set()
    @accessor 'willWinTheCup?', ->
      sedinCount = 0
      @players.forEach (player) ->
        sedinCount++ if player.split(' ')[1] == 'Sedin'
      sedinCount >= 2
  )
  show team = new Team()
  show team.observeAndFire 'willWinTheCup?', (status) -> log status
  equal team.get('willWinTheCup?'), false
  show team.get('players').add 'Henrik Sedin'
  equal logged.last, false
  show team.get('players').add 'Daniel Sedin'
  equal logged.last, true
!!!

### isEmpty() : boolean

`isEmpty` returns a boolean: `true` if the set has no items, and `false` if it has any items.

_Note_: Using `isEmpty()` in an accessor body will register the set `isEmpty` is called on as a source of the property being calculated, so that whenever the set changes the property will be recalculated.

!!!
test 'Set::isEmpty returns true if the set has no items', ->
  show set = new Batman.Set()
  ok set.isEmpty()
  show set.add('a')
  equal set.isEmpty(), false
!!!

!!!
test 'Set::isEmpty registers the set as a source of an accessor', ->
  show (class Team extends Batman.Object
    constructor: ->
      @games = new Batman.Set()
    @accessor 'seasonStarted?', -> !@games.isEmpty()
  )
  show team = new Team
  equal team.get('seasonStarted?'), false
  show team.get('games').add({win: true})
  equal team.get('seasonStarted?'), true
!!!

### clear() : Array

`clear` removes all items from a set. Returns an array of all the items in the set.

`clear` will fire the `itemsWereRemoved` event once with all the items in the set.

_Note_: Set iteration order is not defined, so the order of the array of items returned by `clear` is undefined.

!!!
test 'Set::clear empties the set', ->
  show set = new Batman.Set('a', 'b', 'c')
  equal set.isEmpty(), false
  deepEqual set.clear().sort(), ['a', 'b', 'c']
  ok set.isEmpty()
!!!

!!!
test 'Set::clear fires the itemsWereRemoved event with all the items in the set', ->
  show set = new Batman.Set('a', 'b', 'c')
  show set.on('itemsWereRemoved', (items...) -> log items)
  show set.clear()
  deepEqual logged.last.sort(), ['a', 'b', 'c']
!!!

### replace(collection : Enumerable) : Array

`replace` removes all the items in a set and then adds all the items found in another `collection`. The other collection must have a `toArray` function which returns an array representation of the collection. Returns the array of items added.

`replace` will fire the `itemsWereRemoved` event once with all the items in the set, and then the `itemsWereAdded` event once with the items from the incoming collection.

!!!
test 'Set::replace empties the set and then adds items from a different collection', ->
  show set = new Batman.Set('a', 'b', 'c')
  show secondSet = new Batman.Set('d', 'e', 'f')
  deepEqual set.replace(secondSet).sort(), ['d', 'e', 'f']
  deepEqual set.toArray().sort(), ['d', 'e', 'f']
!!!

!!!
test 'Set::replace fires the itemsWereRemoved event with all the items in the set', ->
  show set = new Batman.Set('a', 'b', 'c')
  show set.on('itemsWereRemoved', (items...) -> log items)
  show set.replace(new Batman.SimpleSet())
  deepEqual logged.last.sort(), ['a', 'b', 'c']
!!!

!!!
test 'Set::replace fires the itemsWereAdded event with all the items in the incoming set', ->
  show set = new Batman.Set()
  show set.on('itemsWereAdded', (items...) -> log items)
  show set.replace(new Batman.SimpleSet('a', 'b', 'c'))
  deepEqual logged.last.sort(), ['a', 'b', 'c']
!!!

### toArray() : Array

`toArray` returns an array representation of the set.

_Note_: Set iteration order is not defined, so the order in which the set's items appear in the array is not defined. It is however stable, so the order of the items in two successive `toArray` calls where the set was not modified in between should be the same.

_Note_: `toArray` is also an observable property.

_Note_: Using `toArray()` in an accessor body will register the set `toArray` is called on as a source of the property being calculated, so that whenever the set changes the property will be recalculated.

!!!
test 'Set::toArray returns an array representation of the set', ->
  show set = new Batman.Set()
  deepEqual set.toArray(), []
  show set.add('a', 'b', 'c')
  deepEqual set.toArray().sort(), ['a', 'b', 'c']
!!!

### merge(collections... : Enumerable) : Set

`merge` adds all the items in a set and all the items in the passed `collections` to a new set and returns it. A `collection` is an object which has a `forEach` function. It is a non-destructive collection union. The set `merge` is called on and each `collection` passed to `merge` remain unaffected.

_Note_: Be careful about using `merge` within accessors. Calling `merge` in an accessor function body will register the set `merge` is called upon as a source of the property being calculated, which means each the set changes, the property will be recalculated. This means the merge will occur again each time, and return an entirely new `Set` instance. If the previously returned `Set` instance is retained after recalculation, this is a big memory leak. Instead of merging in accessors, try to use a `SetUnion` or a `SetIntersection`.

!!!
test 'Set::merge returns a new set with the items of the original set and the passed set', ->
  show abc = new Batman.Set('a', 'b', 'c')
  show def = new Batman.Set('d', 'e', 'f')
  equal Batman.typeOf(set = abc.merge(def)), 'Object'
  deepEqual set.toArray().sort(), ['a', 'b', 'c', 'd', 'e', 'f']
!!!

### indexedBy(key : String) : SetIndex

### indexedByUnique(key : String) : UniqueSetIndex

### sortedBy(key: String) : SetSort
