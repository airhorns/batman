= batman.js

[batman.js](http://batmanjs.org/) is a framework for building rich single-page browser applications. It is written in [CoffeeScript](http://jashkenas.github.com/coffee-script/) and its API is developed with CoffeeScript in mind, but of course you can use plain old JavaScript too.

=== It's got:

* a stateful MVC architecture
* a powerful binding system
* routable controller actions
* pure HTML views
* toolchain support built on [node.js](http://nodejs.org) and [cake](http://jashkenas.github.com/coffee-script/#cake)

Batman's API is heavily inspired by [Rails](http://rubyonrails.org/) and designed to make Rails devs feel right at home.

==== Platforms

Batman runs in node and the browser. Batman supports node v0.4.x and v0.6.x. We're targeting Chrome, Safari 4+, Firefox 3+, and IE 7+ for compatibility. Batman expects ES5 features like `Function::bind` and `Array::map`, so we recommend poly-filling these for older browsers with something like [es5shim](https://github.com/kriskowal/es5-shim) or [augmentjs](http://augmentjs.com/). Batman also expects `JSON.parse`, which can be implemented in browsers without it using [json2.js](https://github.com/douglascrockford/JSON-js).

== Installation

Batman is available as a standalone download or as an `npm` package.

=== Standalone Browser Version

Versions of batman suitable for use in a web application are available at GitHub.

=== node.js

If you haven't already, you'll need to install [node.js](http://nodejs.org). Then:

```bash
npm install -g batman
```

Generate a new batman.js app somewhere, called my_app:

```bash
cd ~/code
batman new my_app
```

Fire it up:

```bash
cd my_app
batman server # (or just "batman s")
```

Now visit [http://localhost:1047](http://localhost:1047) and start playing around!

== Architecture

Batman prescribes an MVC architecture for client side applications which fits together like this:

* Models have validations, lifecycle events, a built-in identity map, and can be told how to persist themselves. (`Batman.LocalStorage`, `Batman.RestStorage`, and `Batman.RailsStorage` are included).
* Views are JavaScript classes which render templates written in pure HTML. The templates use `data-*` attributes to create bindings to model data and trigger event handlers.
* Controllers are persistent objects which mediate access to the model data, render the views, and handle events from the views.

A batman.js application is served up in one page load, followed by asynchronous requests for various resources as the user interacts with the app. Navigation within the app can use [pushState](https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries) where supported, or fall back on to [hash-bang fragment identifers](http://www.w3.org/QA/2011/05/hash_uris.html).
